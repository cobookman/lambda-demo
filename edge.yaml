AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploy Lambda at the AWS Region

Resources:
  CFDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: 'CI/CD for Lambda@Edge'
        Origins:
          -
            Id: MyOrigin
            DomainName: aws.amazon.com
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: match-viewer
        DefaultCacheBehavior:
          TargetOriginId: MyOrigin
          LambdaFunctionAssociations:
            -
              EventType: viewer-request
              LambdaFunctionARN: !Ref LambdaEdgeFunction.Version
          ForwardedValues:
            QueryString: 'true'
            Headers:
             - Origin
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all

  LambdaEdgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: python3.7
      Handler: index.handler
      Timeout: 5
      AutoPublishAlias: live 
      InlineCode: |
        import json
        import random
        import urllib.request
        from datetime import datetime
        endpoints = ['https://lrmufx1w9e.execute-api.us-west-2.amazonaws.com/', 'https://wpbz1nwdsh.execute-api.us-east-2.amazonaws.com/']
        def handler(event, context):
            url = random.choice(endpoints)
            req = urllib.request.Request(url)
            res = urllib.request.urlopen(req)
            body = response.read().decode('utf8')
            return {
                'status': '200',
                'statusDescription': 'OK',
                'body': body,
                'headers': {
                    'content-type': [{'key': 'Content-Type', 'value': 'text/html; charset=utf-8'}],
                    'cache-control': [{'key': 'Cache-Control', 'value': 'no-cache, max-age=0'}],
                },
            }

  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

Outputs:
  LambdaEdgeFunctionVersion: 
    Description: Lambda@Edge Function ARN with Version
    Value: !Ref LambdaEdgeFunction.Version

  CFDistribution: 
    Description: Cloudfront Distribution Domain Name
    Value: !GetAtt CFDistribution.DomainName

